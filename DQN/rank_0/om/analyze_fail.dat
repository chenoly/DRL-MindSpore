# [No.1] construct_wrapper.132
# In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(341)/    def construct(self, gradients):/
funcgraph fg_132(
        %para1 : Tuple[Tensor(F32)*6]    # gradients
        , %para2 : Ref[Tensor(F32)][1]    # beta1_power
        , %para3 : Ref[Tensor(F32)][1]    # beta2_power
        , %para4 : Ref[Tensor(F32)][16, 2]    # _critic.fc.0.weight
        , %para5 : Ref[Tensor(F32)][16]    # _critic.fc.0.bias
        , %para6 : Ref[Tensor(F32)][8, 16]    # _critic.fc.2.weight
        , %para7 : Ref[Tensor(F32)][8]    # _critic.fc.2.bias
        , %para8 : Ref[Tensor(F32)][2, 8]    # _critic.fc.4.weight
        , %para9 : Ref[Tensor(F32)][2]    # _critic.fc.4.bias
        , %para10 : Ref[Tensor(F32)][16, 2]    # moment1._critic.fc.0.weight
        , %para11 : Ref[Tensor(F32)][16]    # moment1._critic.fc.0.bias
        , %para12 : Ref[Tensor(F32)][8, 16]    # moment1._critic.fc.2.weight
        , %para13 : Ref[Tensor(F32)][8]    # moment1._critic.fc.2.bias
        , %para14 : Ref[Tensor(F32)][2, 8]    # moment1._critic.fc.4.weight
        , %para15 : Ref[Tensor(F32)][2]    # moment1._critic.fc.4.bias
        , %para16 : Ref[Tensor(F32)][16, 2]    # moment2._critic.fc.0.weight
        , %para17 : Ref[Tensor(F32)][16]    # moment2._critic.fc.0.bias
        , %para18 : Ref[Tensor(F32)][8, 16]    # moment2._critic.fc.2.weight
        , %para19 : Ref[Tensor(F32)][8]    # moment2._critic.fc.2.bias
        , %para20 : Ref[Tensor(F32)][2, 8]    # moment2._critic.fc.4.weight
        , %para21 : Ref[Tensor(F32)][2]    # moment2._critic.fc.4.bias
        , %para22 : Ref[Tensor(F32)][]    # learning_rate
    ) {

#------------------------> 0
    %1 = FuncGraph::fg_133(%para1)    #(Tuple[Tensor(F32)*6])    # fg_133=construct.133 #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(341)/    def construct(self, gradients):/#[CNode]173
    Primitive::Return{prim_type=1}(%1)    #(Undefined) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(341)/    def construct(self, gradients):/#[CNode]174
}
# order:
#   1: construct_wrapper.132:[CNode]173{[0]: ValueNode<FuncGraph> construct.133, [1]: gradients}
#   2: construct_wrapper.132:[CNode]174{[0]: ValueNode<Primitive> Return, [1]: [CNode]173}


# [No.2] construct.133
# In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(341)/    def construct(self, gradients):/
funcgraph fg_133[fg_132](
        %para23 : Tuple[Tensor(F32)*6]    # gradients
    ) {
    %1 : Tensor(F32)[1] = DoSignaturePrimitive::S-Prim-mul{prim_type=1}(%para2, Tensor(43)[])    #(Ref[Tensor(F32)][1], Tensor(F32)[]) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(351)/        beta1_power = self.beta1_power * self.beta1/#beta1_power
    %2 : Ref[Tensor(F32)][1] = DoSignaturePrimitive::S-Prim-Assign{prim_type=1}[output_names=["output"], side_effect_mem=Bool(1), input_names=["ref", "value"]](%para2, %1)    #(Ref[Tensor(F32)][1], Tensor(F32)[1]) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(352)/        self.beta1_power = beta1_power/#[CNode]175
    %3 : Tensor(F32)[1] = DoSignaturePrimitive::S-Prim-mul{prim_type=1}(%para3, Tensor(43)[])    #(Ref[Tensor(F32)][1], Tensor(F32)[]) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(353)/        beta2_power = self.beta2_power * self.beta2/#beta2_power
    %4 : Ref[Tensor(F32)][1] = DoSignaturePrimitive::S-Prim-Assign{prim_type=1}[output_names=["output"], side_effect_mem=Bool(1), input_names=["ref", "value"]](%para3, %3)    #(Ref[Tensor(F32)][1], Tensor(F32)[1]) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(354)/        self.beta2_power = beta2_power/#[CNode]176
    %5 : Tuple[Ref[Tensor(F32)]*2] = Primitive::MakeTuple{prim_type=1}(%2, %4)    #(Ref[Tensor(F32)][1], Ref[Tensor(F32)][1]) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(341)/    def construct(self, gradients):/#[CNode]177
    %6 : Tuple[Ref[Tensor(F32)]*2] = Primitive::stop_gradient{prim_type=1}(%5)    #(Tuple[Ref[Tensor(F32)]*2]) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(341)/    def construct(self, gradients):/#[CNode]178
    %7 : Bool = FuncGraph::fg_179(Bool(0))    #(Bool)    # fg_179=bool_.179 #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(355)/        if self.is_group_lr:/#180
    %8 : Func = Primitive::Switch{prim_type=1}(%7, FuncGraph::fg_181, FuncGraph::fg_134)    #(Bool, Func, Func)    # fg_181=✓construct.181, fg_134=✗construct.134 #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(355)/        if self.is_group_lr:/#[CNode]182

#------------------------> 1
    %9 = %8() #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(355)/        if self.is_group_lr:/#[CNode]183
    %10 = Primitive::Depend{prim_type=1}[side_effect_propagate=I64(1)](%9, %6)    #(Undefined, Tuple[Ref[Tensor(F32)]*2]) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(341)/    def construct(self, gradients):/#[CNode]184
    Primitive::Return{prim_type=1}(%10)    #(Undefined) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(341)/    def construct(self, gradients):/#[CNode]185
}
# order:
#   1: construct.133:gradients{[0]: ValueNode<FuncGraph> decay_weight.186, [1]: gradients}
#   2: construct.133:gradients{[0]: ValueNode<FuncGraph> gradients_centralization.187, [1]: gradients}
#   3: construct.133:gradients{[0]: ValueNode<FuncGraph> scale_grad.188, [1]: gradients}
#   4: construct.133:gradients{[0]: ValueNode<FuncGraph> _grad_sparse_indices_deduplicate.189, [1]: gradients}
#   5: construct.133:lr{[0]: ValueNode<FuncGraph> get_lr.190}
#   6: construct.133:beta1_power{[0]: ValueNode<DoSignaturePrimitive> S-Prim-mul, [1]: beta1_power, [2]: ValueNode<Tensor> Tensor(shape=[], dtype=Float32, value= 0.9)}
#   7: construct.133:[CNode]175{[0]: ValueNode<DoSignaturePrimitive> S-Prim-Assign, [1]: beta1_power, [2]: beta1_power}
#   8: construct.133:beta2_power{[0]: ValueNode<DoSignaturePrimitive> S-Prim-mul, [1]: beta2_power, [2]: ValueNode<Tensor> Tensor(shape=[], dtype=Float32, value= 0.999)}
#   9: construct.133:[CNode]176{[0]: ValueNode<DoSignaturePrimitive> S-Prim-Assign, [1]: beta2_power, [2]: beta2_power}
#  10: construct.133:180{[0]: ValueNode<FuncGraph> bool_.179, [1]: ValueNode<BoolImm> false}
#  11: construct.133:[CNode]182{[0]: ValueNode<Primitive> Switch, [1]: 180, [2]: ValueNode<FuncGraph> ✓construct.181, [3]: ValueNode<FuncGraph> ✗construct.134}
#  12: construct.133:[CNode]183{[0]: [CNode]182}
#  13: construct.133:[CNode]185{[0]: ValueNode<Primitive> Return, [1]: [CNode]184}


# [No.3] ✗construct.134
# In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(355)/        if self.is_group_lr:/
funcgraph fg_134[fg_133](
) {
    %1 : $(construct.133):Tensor(F32)[1] = DoSignaturePrimitive::S-Prim-mul{prim_type=1}(%para2, Tensor(43)[])    #(Ref[Tensor(F32)][1], Tensor(F32)[]) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(351)/        beta1_power = self.beta1_power * self.beta1/#beta1_power
    %2 : $(construct.133):Tensor(F32)[1] = DoSignaturePrimitive::S-Prim-mul{prim_type=1}(%para3, Tensor(43)[])    #(Ref[Tensor(F32)][1], Tensor(F32)[]) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(353)/        beta2_power = self.beta2_power * self.beta2/#beta2_power
    %3 : $(construct.133):Ref[Tensor(F32)][] = FuncGraph::fg_190()    # fg_190=get_lr.190 #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(349)/        lr = self.get_lr()/#lr
    %4 : Func = DoSignaturePrimitive::S-Prim-Partial{prim_type=1}[side_effect_propagate=I64(1)](DoSignaturePrimitive::S-Prim-adam_opt{prim_type=1}, DoSignaturePrimitive::S-Prim-Adam{prim_type=1}[use_nesterov=Bool(0), side_effect_mem=Bool(1), use_locking=Bool(0)], DoSignaturePrimitive::S-Prim-FusedSparseAdam{prim_type=1}[use_nesterov=Bool(0), use_locking=Bool(0), input_names=["var", "m", "v", "beta1_power", "beta2_power", "lr", "beta1", "beta2", "epsilon", "grad", "indices"], side_effect_mem=Bool(1), primitive_target="CPU", output_names=["var", "m", "v"]], DoSignaturePrimitive::S-Prim-Push{prim_type=1}[output_names=["key"], use_nesterov=Bool(0), input_names=["optim_inputs", "optim_input_shapes"], only_shape_indices=[I64(0), I64(1), I64(2)], optim_type="Adam", primitive_target="CPU", _side_effect=Bool(1)], DoSignaturePrimitive::S-Prim-Pull{prim_type=1}[input_names=["key", "weight"], output_names=["output"], primitive_target="CPU"], Bool(0), Bool(0), Bool(1), %1, %2, Tensor(43)[], Tensor(43)[], Tensor(43)[], %3)    #(Func, Func, Func, Func, Func, Bool, Bool, Bool, Tensor(F32)[1], Tensor(F32)[1], Tensor(F32)[], Tensor(F32)[], Tensor(F32)[], Ref[Tensor(F32)][]) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(361)/            success = self.map_(F.partial(_adam_opt, self.opt, self.sparse_opt, self._ps_push, self._ps_pull,/#[CNode]191
    %5 : $(construct.133):Tuple[Tensor(F32)*6] = FuncGraph::fg_186(%para23)    #(Tuple[Tensor(F32)*6])    # fg_186=decay_weight.186 #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(345)/        gradients = self.decay_weight(gradients)/#gradients
    %6 : $(construct.133):Tuple[Tensor(F32)*6] = FuncGraph::fg_187(%5)    #(Tuple[Tensor(F32)*6])    # fg_187=gradients_centralization.187 #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(346)/        gradients = self.gradients_centralization(gradients)/#gradients
    %7 : $(construct.133):Tuple[Tensor(F32)*6] = FuncGraph::fg_188(%6)    #(Tuple[Tensor(F32)*6])    # fg_188=scale_grad.188 #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(347)/        gradients = self.scale_grad(gradients)/#gradients
    %8 : $(construct.133):Tuple[Tensor(F32)*6] = FuncGraph::fg_189(%7)    #(Tuple[Tensor(F32)*6])    # fg_189=_grad_sparse_indices_deduplicate.189 #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(348)/        gradients = self._grad_sparse_indices_deduplicate(gradients)/#gradients
    %9 : $(construct.133):Tuple[Ref[Tensor(F32)]*6] = Primitive::MakeTuple{prim_type=1}(%para4, %para5, %para6, %para7, %para8, %para9)    #(Ref[Tensor(F32)][16, 2], Ref[Tensor(F32)][16], Ref[Tensor(F32)][8, 16], Ref[Tensor(F32)][8], Ref[Tensor(F32)][2, 8], Ref[Tensor(F32)][2]) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(342)/        params = self.parameters/#[CNode]192
    %10 : $(construct.133):Tuple[Ref[Tensor(F32)]*6] = Primitive::MakeTuple{prim_type=1}(%para10, %para11, %para12, %para13, %para14, %para15)    #(Ref[Tensor(F32)][16, 2], Ref[Tensor(F32)][16], Ref[Tensor(F32)][8, 16], Ref[Tensor(F32)][8], Ref[Tensor(F32)][2, 8], Ref[Tensor(F32)][2]) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(343)/        moment1 = self.moment1/#[CNode]193
    %11 : $(construct.133):Tuple[Ref[Tensor(F32)]*6] = Primitive::MakeTuple{prim_type=1}(%para16, %para17, %para18, %para19, %para20, %para21)    #(Ref[Tensor(F32)][16, 2], Ref[Tensor(F32)][16], Ref[Tensor(F32)][8, 16], Ref[Tensor(F32)][8], Ref[Tensor(F32)][2, 8], Ref[Tensor(F32)][2]) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(344)/        moment2 = self.moment2/#[CNode]194

#------------------------> 2
    %12 = DoSignaturePrimitive::S-Prim-map{prim_type=1}(%4, %8, %9, %10, %11, (Bool(0), Bool(0), Bool(0), Bool(0), Bool(0), Bool(0)), (Bool(0), Bool(0), Bool(0), Bool(0), Bool(0), Bool(0)))    #(Func, Tuple[Tensor(F32)*6], Tuple[Ref[Tensor(F32)]*6], Tuple[Ref[Tensor(F32)]*6], Tuple[Ref[Tensor(F32)]*6], Tuple[Bool*6], Tuple[Bool*6]) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(361)/            success = self.map_(F.partial(_adam_opt, self.opt, self.sparse_opt, self._ps_push, self._ps_pull,/#success
    %13 = FuncGraph::fg_195(%12)    #(Undefined)    # fg_195=↓construct.195 #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(355)/        if self.is_group_lr:/#[CNode]196
    Primitive::Return{prim_type=1}(%13)    #(Undefined) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(355)/        if self.is_group_lr:/#[CNode]197
}
# order:
#   1: ✗construct.134:[CNode]191{[0]: ValueNode<DoSignaturePrimitive> S-Prim-Partial, [1]: ValueNode<DoSignaturePrimitive> S-Prim-adam_opt, [2]: ValueNode<DoSignaturePrimitive> S-Prim-Adam, [3]: ValueNode<DoSignaturePrimitive> S-Prim-FusedSparseAdam, [4]: ValueNode<DoSignaturePrimitive> S-Prim-Push, [5]: ValueNode<DoSignaturePrimitive> S-Prim-Pull, [6]: ValueNode<BoolImm> false, [7]: ValueNode<BoolImm> false, [8]: ValueNode<BoolImm> true, [9]: beta1_power, [10]: beta2_power, [11]: ValueNode<Tensor> Tensor(shape=[], dtype=Float32, value= 0.9), [12]: ValueNode<Tensor> Tensor(shape=[], dtype=Float32, value= 0.999), [13]: ValueNode<Tensor> Tensor(shape=[], dtype=Float32, value= 1e-008), [14]: lr}
#   2: ✗construct.134:success{[0]: ValueNode<DoSignaturePrimitive> S-Prim-map, [1]: [CNode]191, [2]: gradients, [3]: [CNode]192, [4]: [CNode]193, [5]: [CNode]194, [6]: ValueNode<ValueTuple> (false, false, false, false, false, false), [7]: ValueNode<ValueTuple> (false, false, false, false, false, false)}
#   3: ✗construct.134:[CNode]196{[0]: ValueNode<FuncGraph> ↓construct.195, [1]: success}
#   4: ✗construct.134:[CNode]197{[0]: ValueNode<Primitive> Return, [1]: [CNode]196}


# [No.4] map.135
# In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(361)/            success = self.map_(F.partial(_adam_opt, self.opt, self.sparse_opt, self._ps_push, self._ps_pull,/
funcgraph fg_135(
        %para24 : Func    # [Parameter]136
        , %para25 : Tuple[Tensor(F32)*6]    # [Parameter]137
        , %para26 : Tuple[Ref[Tensor(F32)]*6]    # [Parameter]138
        , %para27 : Tuple[Ref[Tensor(F32)]*6]    # [Parameter]139
        , %para28 : Tuple[Ref[Tensor(F32)]*6]    # [Parameter]140
        , %para29 : Tuple[Bool*6]    # [Parameter]141
        , %para30 : Tuple[Bool*6]    # [Parameter]142
    ) {
    %1 : Tensor(F32)[16, 2] = Primitive::TupleGetItem{prim_type=1}(%para25, I64(0))    #(Tuple[Tensor(F32)*6], I64) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(361)/            success = self.map_(F.partial(_adam_opt, self.opt, self.sparse_opt, self._ps_push, self._ps_pull,/#[CNode]198
    %2 : Ref[Tensor(F32)][16, 2] = Primitive::TupleGetItem{prim_type=1}(%para26, I64(0))    #(Tuple[Ref[Tensor(F32)]*6], I64) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(361)/            success = self.map_(F.partial(_adam_opt, self.opt, self.sparse_opt, self._ps_push, self._ps_pull,/#[CNode]199
    %3 : Ref[Tensor(F32)][16, 2] = Primitive::TupleGetItem{prim_type=1}(%para27, I64(0))    #(Tuple[Ref[Tensor(F32)]*6], I64) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(361)/            success = self.map_(F.partial(_adam_opt, self.opt, self.sparse_opt, self._ps_push, self._ps_pull,/#[CNode]200
    %4 : Ref[Tensor(F32)][16, 2] = Primitive::TupleGetItem{prim_type=1}(%para28, I64(0))    #(Tuple[Ref[Tensor(F32)]*6], I64) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(361)/            success = self.map_(F.partial(_adam_opt, self.opt, self.sparse_opt, self._ps_push, self._ps_pull,/#[CNode]201
    %5 : Bool = Primitive::TupleGetItem{prim_type=1}(%para29, I64(0))    #(Tuple[Bool*6], I64) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(361)/            success = self.map_(F.partial(_adam_opt, self.opt, self.sparse_opt, self._ps_push, self._ps_pull,/#[CNode]202
    %6 : Bool = Primitive::TupleGetItem{prim_type=1}(%para30, I64(0))    #(Tuple[Bool*6], I64) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(361)/            success = self.map_(F.partial(_adam_opt, self.opt, self.sparse_opt, self._ps_push, self._ps_pull,/#[CNode]203

#------------------------> 3
    %7 = FuncGraph::fg_143(%para24, %1, %2, %3, %4, %5, %6)    #(Func, Tensor(F32)[16, 2], Ref[Tensor(F32)][16, 2], Ref[Tensor(F32)][16, 2], Ref[Tensor(F32)][16, 2], Bool, Bool)    # fg_143=map.143 #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(361)/            success = self.map_(F.partial(_adam_opt, self.opt, self.sparse_opt, self._ps_push, self._ps_pull,/#[CNode]204
    %8 = Primitive::TupleGetItem{prim_type=1}(%para25, I64(1))    #(Tuple[Tensor(F32)*6], Undefined) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(361)/            success = self.map_(F.partial(_adam_opt, self.opt, self.sparse_opt, self._ps_push, self._ps_pull,/#[CNode]205
    %9 = Primitive::TupleGetItem{prim_type=1}(%para26, I64(1))    #(Tuple[Ref[Tensor(F32)]*6], Undefined) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(361)/            success = self.map_(F.partial(_adam_opt, self.opt, self.sparse_opt, self._ps_push, self._ps_pull,/#[CNode]206
    %10 = Primitive::TupleGetItem{prim_type=1}(%para27, I64(1))    #(Tuple[Ref[Tensor(F32)]*6], Undefined) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(361)/            success = self.map_(F.partial(_adam_opt, self.opt, self.sparse_opt, self._ps_push, self._ps_pull,/#[CNode]207
    %11 = Primitive::TupleGetItem{prim_type=1}(%para28, I64(1))    #(Tuple[Ref[Tensor(F32)]*6], Undefined) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(361)/            success = self.map_(F.partial(_adam_opt, self.opt, self.sparse_opt, self._ps_push, self._ps_pull,/#[CNode]208
    %12 = Primitive::TupleGetItem{prim_type=1}(%para29, I64(1))    #(Tuple[Bool*6], Undefined) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(361)/            success = self.map_(F.partial(_adam_opt, self.opt, self.sparse_opt, self._ps_push, self._ps_pull,/#[CNode]209
    %13 = Primitive::TupleGetItem{prim_type=1}(%para30, I64(1))    #(Tuple[Bool*6], Undefined) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(361)/            success = self.map_(F.partial(_adam_opt, self.opt, self.sparse_opt, self._ps_push, self._ps_pull,/#[CNode]210
    %14 = FuncGraph::fg_211(%para24, %8, %9, %10, %11, %12, %13)    #(Func, Undefined, Undefined, Undefined, Undefined, Undefined, Undefined)    # fg_211=map.211 #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(361)/            success = self.map_(F.partial(_adam_opt, self.opt, self.sparse_opt, self._ps_push, self._ps_pull,/#[CNode]212
    %15 = Primitive::TupleGetItem{prim_type=1}(%para25, I64(2))    #(Tuple[Tensor(F32)*6], Undefined) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(361)/            success = self.map_(F.partial(_adam_opt, self.opt, self.sparse_opt, self._ps_push, self._ps_pull,/#[CNode]213
    %16 = Primitive::TupleGetItem{prim_type=1}(%para26, I64(2))    #(Tuple[Ref[Tensor(F32)]*6], Undefined) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(361)/            success = self.map_(F.partial(_adam_opt, self.opt, self.sparse_opt, self._ps_push, self._ps_pull,/#[CNode]214
    %17 = Primitive::TupleGetItem{prim_type=1}(%para27, I64(2))    #(Tuple[Ref[Tensor(F32)]*6], Undefined) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(361)/            success = self.map_(F.partial(_adam_opt, self.opt, self.sparse_opt, self._ps_push, self._ps_pull,/#[CNode]215
    %18 = Primitive::TupleGetItem{prim_type=1}(%para28, I64(2))    #(Tuple[Ref[Tensor(F32)]*6], Undefined) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(361)/            success = self.map_(F.partial(_adam_opt, self.opt, self.sparse_opt, self._ps_push, self._ps_pull,/#[CNode]216
    %19 = Primitive::TupleGetItem{prim_type=1}(%para29, I64(2))    #(Tuple[Bool*6], Undefined) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(361)/            success = self.map_(F.partial(_adam_opt, self.opt, self.sparse_opt, self._ps_push, self._ps_pull,/#[CNode]217
    %20 = Primitive::TupleGetItem{prim_type=1}(%para30, I64(2))    #(Tuple[Bool*6], Undefined) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(361)/            success = self.map_(F.partial(_adam_opt, self.opt, self.sparse_opt, self._ps_push, self._ps_pull,/#[CNode]218
    %21 = FuncGraph::fg_219(%para24, %15, %16, %17, %18, %19, %20)    #(Func, Undefined, Undefined, Undefined, Undefined, Undefined, Undefined)    # fg_219=map.219 #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(361)/            success = self.map_(F.partial(_adam_opt, self.opt, self.sparse_opt, self._ps_push, self._ps_pull,/#[CNode]220
    %22 = Primitive::TupleGetItem{prim_type=1}(%para25, I64(3))    #(Tuple[Tensor(F32)*6], Undefined) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(361)/            success = self.map_(F.partial(_adam_opt, self.opt, self.sparse_opt, self._ps_push, self._ps_pull,/#[CNode]221
    %23 = Primitive::TupleGetItem{prim_type=1}(%para26, I64(3))    #(Tuple[Ref[Tensor(F32)]*6], Undefined) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(361)/            success = self.map_(F.partial(_adam_opt, self.opt, self.sparse_opt, self._ps_push, self._ps_pull,/#[CNode]222
    %24 = Primitive::TupleGetItem{prim_type=1}(%para27, I64(3))    #(Tuple[Ref[Tensor(F32)]*6], Undefined) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(361)/            success = self.map_(F.partial(_adam_opt, self.opt, self.sparse_opt, self._ps_push, self._ps_pull,/#[CNode]223
    %25 = Primitive::TupleGetItem{prim_type=1}(%para28, I64(3))    #(Tuple[Ref[Tensor(F32)]*6], Undefined) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(361)/            success = self.map_(F.partial(_adam_opt, self.opt, self.sparse_opt, self._ps_push, self._ps_pull,/#[CNode]224
    %26 = Primitive::TupleGetItem{prim_type=1}(%para29, I64(3))    #(Tuple[Bool*6], Undefined) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(361)/            success = self.map_(F.partial(_adam_opt, self.opt, self.sparse_opt, self._ps_push, self._ps_pull,/#[CNode]225
    %27 = Primitive::TupleGetItem{prim_type=1}(%para30, I64(3))    #(Tuple[Bool*6], Undefined) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(361)/            success = self.map_(F.partial(_adam_opt, self.opt, self.sparse_opt, self._ps_push, self._ps_pull,/#[CNode]226
    %28 = FuncGraph::fg_227(%para24, %22, %23, %24, %25, %26, %27)    #(Func, Undefined, Undefined, Undefined, Undefined, Undefined, Undefined)    # fg_227=map.227 #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(361)/            success = self.map_(F.partial(_adam_opt, self.opt, self.sparse_opt, self._ps_push, self._ps_pull,/#[CNode]228
    %29 = Primitive::TupleGetItem{prim_type=1}(%para25, I64(4))    #(Tuple[Tensor(F32)*6], Undefined) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(361)/            success = self.map_(F.partial(_adam_opt, self.opt, self.sparse_opt, self._ps_push, self._ps_pull,/#[CNode]229
    %30 = Primitive::TupleGetItem{prim_type=1}(%para26, I64(4))    #(Tuple[Ref[Tensor(F32)]*6], Undefined) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(361)/            success = self.map_(F.partial(_adam_opt, self.opt, self.sparse_opt, self._ps_push, self._ps_pull,/#[CNode]230
    %31 = Primitive::TupleGetItem{prim_type=1}(%para27, I64(4))    #(Tuple[Ref[Tensor(F32)]*6], Undefined) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(361)/            success = self.map_(F.partial(_adam_opt, self.opt, self.sparse_opt, self._ps_push, self._ps_pull,/#[CNode]231
    %32 = Primitive::TupleGetItem{prim_type=1}(%para28, I64(4))    #(Tuple[Ref[Tensor(F32)]*6], Undefined) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(361)/            success = self.map_(F.partial(_adam_opt, self.opt, self.sparse_opt, self._ps_push, self._ps_pull,/#[CNode]232
    %33 = Primitive::TupleGetItem{prim_type=1}(%para29, I64(4))    #(Tuple[Bool*6], Undefined) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(361)/            success = self.map_(F.partial(_adam_opt, self.opt, self.sparse_opt, self._ps_push, self._ps_pull,/#[CNode]233
    %34 = Primitive::TupleGetItem{prim_type=1}(%para30, I64(4))    #(Tuple[Bool*6], Undefined) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(361)/            success = self.map_(F.partial(_adam_opt, self.opt, self.sparse_opt, self._ps_push, self._ps_pull,/#[CNode]234
    %35 = FuncGraph::fg_235(%para24, %29, %30, %31, %32, %33, %34)    #(Func, Undefined, Undefined, Undefined, Undefined, Undefined, Undefined)    # fg_235=map.235 #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(361)/            success = self.map_(F.partial(_adam_opt, self.opt, self.sparse_opt, self._ps_push, self._ps_pull,/#[CNode]236
    %36 = Primitive::TupleGetItem{prim_type=1}(%para25, I64(5))    #(Tuple[Tensor(F32)*6], Undefined) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(361)/            success = self.map_(F.partial(_adam_opt, self.opt, self.sparse_opt, self._ps_push, self._ps_pull,/#[CNode]237
    %37 = Primitive::TupleGetItem{prim_type=1}(%para26, I64(5))    #(Tuple[Ref[Tensor(F32)]*6], Undefined) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(361)/            success = self.map_(F.partial(_adam_opt, self.opt, self.sparse_opt, self._ps_push, self._ps_pull,/#[CNode]238
    %38 = Primitive::TupleGetItem{prim_type=1}(%para27, I64(5))    #(Tuple[Ref[Tensor(F32)]*6], Undefined) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(361)/            success = self.map_(F.partial(_adam_opt, self.opt, self.sparse_opt, self._ps_push, self._ps_pull,/#[CNode]239
    %39 = Primitive::TupleGetItem{prim_type=1}(%para28, I64(5))    #(Tuple[Ref[Tensor(F32)]*6], Undefined) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(361)/            success = self.map_(F.partial(_adam_opt, self.opt, self.sparse_opt, self._ps_push, self._ps_pull,/#[CNode]240
    %40 = Primitive::TupleGetItem{prim_type=1}(%para29, I64(5))    #(Tuple[Bool*6], Undefined) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(361)/            success = self.map_(F.partial(_adam_opt, self.opt, self.sparse_opt, self._ps_push, self._ps_pull,/#[CNode]241
    %41 = Primitive::TupleGetItem{prim_type=1}(%para30, I64(5))    #(Tuple[Bool*6], Undefined) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(361)/            success = self.map_(F.partial(_adam_opt, self.opt, self.sparse_opt, self._ps_push, self._ps_pull,/#[CNode]242
    %42 = FuncGraph::fg_243(%para24, %36, %37, %38, %39, %40, %41)    #(Func, Undefined, Undefined, Undefined, Undefined, Undefined, Undefined)    # fg_243=map.243 #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(361)/            success = self.map_(F.partial(_adam_opt, self.opt, self.sparse_opt, self._ps_push, self._ps_pull,/#[CNode]244
    %43 = Primitive::MakeTuple{prim_type=1}(%7, %14, %21, %28, %35, %42)    #(Undefined, Undefined, Undefined, Undefined, Undefined, Undefined) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(361)/            success = self.map_(F.partial(_adam_opt, self.opt, self.sparse_opt, self._ps_push, self._ps_pull,/#[CNode]245
    Primitive::Return{prim_type=1}(%43)    #(Undefined) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(361)/            success = self.map_(F.partial(_adam_opt, self.opt, self.sparse_opt, self._ps_push, self._ps_pull,/#[CNode]246
}
# order:
#   1: map.135:[CNode]198{[0]: ValueNode<Primitive> TupleGetItem, [1]: [Parameter]137, [2]: ValueNode<Int64Imm> 0}
#   2: map.135:[CNode]199{[0]: ValueNode<Primitive> TupleGetItem, [1]: [Parameter]138, [2]: ValueNode<Int64Imm> 0}
#   3: map.135:[CNode]200{[0]: ValueNode<Primitive> TupleGetItem, [1]: [Parameter]139, [2]: ValueNode<Int64Imm> 0}
#   4: map.135:[CNode]201{[0]: ValueNode<Primitive> TupleGetItem, [1]: [Parameter]140, [2]: ValueNode<Int64Imm> 0}
#   5: map.135:[CNode]202{[0]: ValueNode<Primitive> TupleGetItem, [1]: [Parameter]141, [2]: ValueNode<Int64Imm> 0}
#   6: map.135:[CNode]203{[0]: ValueNode<Primitive> TupleGetItem, [1]: [Parameter]142, [2]: ValueNode<Int64Imm> 0}
#   7: map.135:[CNode]204{[0]: ValueNode<FuncGraph> map.143, [1]: [Parameter]136, [2]: [CNode]198, [3]: [CNode]199, [4]: [CNode]200, [5]: [CNode]201, [6]: [CNode]202, [7]: [CNode]203}
#   8: map.135:[CNode]205{[0]: ValueNode<Primitive> TupleGetItem, [1]: [Parameter]137, [2]: ValueNode<Int64Imm> 1}
#   9: map.135:[CNode]206{[0]: ValueNode<Primitive> TupleGetItem, [1]: [Parameter]138, [2]: ValueNode<Int64Imm> 1}
#  10: map.135:[CNode]207{[0]: ValueNode<Primitive> TupleGetItem, [1]: [Parameter]139, [2]: ValueNode<Int64Imm> 1}
#  11: map.135:[CNode]208{[0]: ValueNode<Primitive> TupleGetItem, [1]: [Parameter]140, [2]: ValueNode<Int64Imm> 1}
#  12: map.135:[CNode]209{[0]: ValueNode<Primitive> TupleGetItem, [1]: [Parameter]141, [2]: ValueNode<Int64Imm> 1}
#  13: map.135:[CNode]210{[0]: ValueNode<Primitive> TupleGetItem, [1]: [Parameter]142, [2]: ValueNode<Int64Imm> 1}
#  14: map.135:[CNode]212{[0]: ValueNode<FuncGraph> map.211, [1]: [Parameter]136, [2]: [CNode]205, [3]: [CNode]206, [4]: [CNode]207, [5]: [CNode]208, [6]: [CNode]209, [7]: [CNode]210}
#  15: map.135:[CNode]213{[0]: ValueNode<Primitive> TupleGetItem, [1]: [Parameter]137, [2]: ValueNode<Int64Imm> 2}
#  16: map.135:[CNode]214{[0]: ValueNode<Primitive> TupleGetItem, [1]: [Parameter]138, [2]: ValueNode<Int64Imm> 2}
#  17: map.135:[CNode]215{[0]: ValueNode<Primitive> TupleGetItem, [1]: [Parameter]139, [2]: ValueNode<Int64Imm> 2}
#  18: map.135:[CNode]216{[0]: ValueNode<Primitive> TupleGetItem, [1]: [Parameter]140, [2]: ValueNode<Int64Imm> 2}
#  19: map.135:[CNode]217{[0]: ValueNode<Primitive> TupleGetItem, [1]: [Parameter]141, [2]: ValueNode<Int64Imm> 2}
#  20: map.135:[CNode]218{[0]: ValueNode<Primitive> TupleGetItem, [1]: [Parameter]142, [2]: ValueNode<Int64Imm> 2}
#  21: map.135:[CNode]220{[0]: ValueNode<FuncGraph> map.219, [1]: [Parameter]136, [2]: [CNode]213, [3]: [CNode]214, [4]: [CNode]215, [5]: [CNode]216, [6]: [CNode]217, [7]: [CNode]218}
#  22: map.135:[CNode]221{[0]: ValueNode<Primitive> TupleGetItem, [1]: [Parameter]137, [2]: ValueNode<Int64Imm> 3}
#  23: map.135:[CNode]222{[0]: ValueNode<Primitive> TupleGetItem, [1]: [Parameter]138, [2]: ValueNode<Int64Imm> 3}
#  24: map.135:[CNode]223{[0]: ValueNode<Primitive> TupleGetItem, [1]: [Parameter]139, [2]: ValueNode<Int64Imm> 3}
#  25: map.135:[CNode]224{[0]: ValueNode<Primitive> TupleGetItem, [1]: [Parameter]140, [2]: ValueNode<Int64Imm> 3}
#  26: map.135:[CNode]225{[0]: ValueNode<Primitive> TupleGetItem, [1]: [Parameter]141, [2]: ValueNode<Int64Imm> 3}
#  27: map.135:[CNode]226{[0]: ValueNode<Primitive> TupleGetItem, [1]: [Parameter]142, [2]: ValueNode<Int64Imm> 3}
#  28: map.135:[CNode]228{[0]: ValueNode<FuncGraph> map.227, [1]: [Parameter]136, [2]: [CNode]221, [3]: [CNode]222, [4]: [CNode]223, [5]: [CNode]224, [6]: [CNode]225, [7]: [CNode]226}
#  29: map.135:[CNode]229{[0]: ValueNode<Primitive> TupleGetItem, [1]: [Parameter]137, [2]: ValueNode<Int64Imm> 4}
#  30: map.135:[CNode]230{[0]: ValueNode<Primitive> TupleGetItem, [1]: [Parameter]138, [2]: ValueNode<Int64Imm> 4}
#  31: map.135:[CNode]231{[0]: ValueNode<Primitive> TupleGetItem, [1]: [Parameter]139, [2]: ValueNode<Int64Imm> 4}
#  32: map.135:[CNode]232{[0]: ValueNode<Primitive> TupleGetItem, [1]: [Parameter]140, [2]: ValueNode<Int64Imm> 4}
#  33: map.135:[CNode]233{[0]: ValueNode<Primitive> TupleGetItem, [1]: [Parameter]141, [2]: ValueNode<Int64Imm> 4}
#  34: map.135:[CNode]234{[0]: ValueNode<Primitive> TupleGetItem, [1]: [Parameter]142, [2]: ValueNode<Int64Imm> 4}
#  35: map.135:[CNode]236{[0]: ValueNode<FuncGraph> map.235, [1]: [Parameter]136, [2]: [CNode]229, [3]: [CNode]230, [4]: [CNode]231, [5]: [CNode]232, [6]: [CNode]233, [7]: [CNode]234}
#  36: map.135:[CNode]237{[0]: ValueNode<Primitive> TupleGetItem, [1]: [Parameter]137, [2]: ValueNode<Int64Imm> 5}
#  37: map.135:[CNode]238{[0]: ValueNode<Primitive> TupleGetItem, [1]: [Parameter]138, [2]: ValueNode<Int64Imm> 5}
#  38: map.135:[CNode]239{[0]: ValueNode<Primitive> TupleGetItem, [1]: [Parameter]139, [2]: ValueNode<Int64Imm> 5}
#  39: map.135:[CNode]240{[0]: ValueNode<Primitive> TupleGetItem, [1]: [Parameter]140, [2]: ValueNode<Int64Imm> 5}
#  40: map.135:[CNode]241{[0]: ValueNode<Primitive> TupleGetItem, [1]: [Parameter]141, [2]: ValueNode<Int64Imm> 5}
#  41: map.135:[CNode]242{[0]: ValueNode<Primitive> TupleGetItem, [1]: [Parameter]142, [2]: ValueNode<Int64Imm> 5}
#  42: map.135:[CNode]244{[0]: ValueNode<FuncGraph> map.243, [1]: [Parameter]136, [2]: [CNode]237, [3]: [CNode]238, [4]: [CNode]239, [5]: [CNode]240, [6]: [CNode]241, [7]: [CNode]242}
#  43: map.135:[CNode]245{[0]: ValueNode<Primitive> MakeTuple, [1]: [CNode]204, [2]: [CNode]212, [3]: [CNode]220, [4]: [CNode]228, [5]: [CNode]236, [6]: [CNode]244}
#  44: map.135:[CNode]246{[0]: ValueNode<Primitive> Return, [1]: [CNode]245}


# [No.5] map.143
# In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(361)/            success = self.map_(F.partial(_adam_opt, self.opt, self.sparse_opt, self._ps_push, self._ps_pull,/
funcgraph fg_143(
        %para31 : Func    # [Parameter]144
        , %para32 : Tensor(F32)[16, 2]    # [Parameter]145
        , %para33 : Ref[Tensor(F32)][16, 2]    # [Parameter]146
        , %para34 : Ref[Tensor(F32)][16, 2]    # [Parameter]147
        , %para35 : Ref[Tensor(F32)][16, 2]    # [Parameter]148
        , %para36 : Bool    # [Parameter]149
        , %para37 : Bool    # [Parameter]150
    ) {

#------------------------> 4
    %1 = %para31(%para32, %para33, %para34, %para35, %para36, %para37)    #(Tensor(F32)[16, 2], Ref[Tensor(F32)][16, 2], Ref[Tensor(F32)][16, 2], Ref[Tensor(F32)][16, 2], Bool, Bool) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(361)/            success = self.map_(F.partial(_adam_opt, self.opt, self.sparse_opt, self._ps_push, self._ps_pull,/#[CNode]247
    Primitive::Return{prim_type=1}(%1)    #(Undefined) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(361)/            success = self.map_(F.partial(_adam_opt, self.opt, self.sparse_opt, self._ps_push, self._ps_pull,/#[CNode]248
}
# order:
#   1: map.143:[CNode]247{[0]: [Parameter]144, [1]: [Parameter]145, [2]: [Parameter]146, [3]: [Parameter]147, [4]: [Parameter]148, [5]: [Parameter]149, [6]: [Parameter]150}
#   2: map.143:[CNode]248{[0]: ValueNode<Primitive> Return, [1]: [CNode]247}


# [No.6] 151.152
# In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(361)/            success = self.map_(F.partial(_adam_opt, self.opt, self.sparse_opt, self._ps_push, self._ps_pull,/
funcgraph fg_152(
        %para38 : Func    # 153
        , %para39 : Func    # 154
        , %para40 : Func    # 155
        , %para41 : Func    # 156
        , %para42 : Bool    # 157
        , %para43 : Bool    # 158
        , %para44 : Bool    # 159
        , %para45 : Tensor(F32)[1]    # 160
        , %para46 : Tensor(F32)[1]    # 161
        , %para47 : Tensor(F32)[]    # 162
        , %para48 : Tensor(F32)[]    # 163
        , %para49 : Tensor(F32)[]    # 164
        , %para50 : Ref[Tensor(F32)][]    # 165
        , %para51 : Tensor(F32)[16, 2]    # 166
        , %para52 : Ref[Tensor(F32)][16, 2]    # 167
        , %para53 : Ref[Tensor(F32)][16, 2]    # 168
        , %para54 : Ref[Tensor(F32)][16, 2]    # 169
        , %para55 : Bool    # 170
        , %para56 : Bool    # 171
    ) {

#------------------------> 5
    %1 = MultitypeFuncGraph::adam_opt{(Func, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor), (Func, Func, Func, Func, Bool, Bool, Bool, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Bool, Bool), (Tensor, Tensor, Tensor, Tensor, Number, Tensor, Tensor, Tensor, Tensor, Bool, Bool), (Func, Func, Func, Func, Bool, Bool, Bool, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, RowTensor, Tensor, Tensor, Tensor, Bool, Bool)}(%para38, %para39, %para40, %para41, %para42, %para43, %para44, %para45, %para46, %para47, %para48, %para49, %para50, %para51, %para52, %para53, %para54, %para55, %para56)    #(Func, Func, Func, Func, Bool, Bool, Bool, Tensor(F32)[1], Tensor(F32)[1], Tensor(F32)[], Tensor(F32)[], Tensor(F32)[], Ref[Tensor(F32)][], Tensor(F32)[16, 2], Ref[Tensor(F32)][16, 2], Ref[Tensor(F32)][16, 2], Ref[Tensor(F32)][16, 2], Bool, Bool) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(361)/            success = self.map_(F.partial(_adam_opt, self.opt, self.sparse_opt, self._ps_push, self._ps_pull,/#249
    Primitive::Return{prim_type=1}(%1)    #(Undefined) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(361)/            success = self.map_(F.partial(_adam_opt, self.opt, self.sparse_opt, self._ps_push, self._ps_pull,/#250
}
# order:
#   1: 151.152:249{[0]: ValueNode<MultitypeFuncGraph> adam_opt, [1]: 153, [2]: 154, [3]: 155, [4]: 156, [5]: 157, [6]: 158, [7]: 159, [8]: 160, [9]: 161, [10]: 162, [11]: 163, [12]: 164, [13]: 165, [14]: 166, [15]: 167, [16]: 168, [17]: 169, [18]: 170, [19]: 171}
#   2: 151.152:250{[0]: ValueNode<Primitive> Return, [1]: 249}


# [No.7] _run_opt_with_one_number.172
# In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(154)/def _run_opt_with_one_number(opt, sparse_opt, push, pull, use_locking, use_nesterov, target,/
funcgraph fg_172(
        %para57 : Func    # opt
        , %para58 : Func    # sparse_opt
        , %para59 : Func    # push
        , %para60 : Func    # pull
        , %para61 : Bool    # use_locking
        , %para62 : Bool    # use_nesterov
        , %para63 : Bool    # target
        , %para64 : Tensor(F32)[1]    # beta1_power
        , %para65 : Tensor(F32)[1]    # beta2_power
        , %para66 : Tensor(F32)[]    # beta1
        , %para67 : Tensor(F32)[]    # beta2
        , %para68 : Tensor(F32)[]    # eps
        , %para69 : Ref[Tensor(F32)][]    # lr
        , %para70 : Tensor(F32)[16, 2]    # gradient
        , %para71 : Ref[Tensor(F32)][16, 2]    # param
        , %para72 : Ref[Tensor(F32)][16, 2]    # moment1
        , %para73 : Ref[Tensor(F32)][16, 2]    # moment2
        , %para74 : Bool    # ps_parameter
        , %para75 : Bool    # cache_enable
    ) {

#------------------------> 6
    %1 = Primitive::resolve{prim_type=1}(NameSpace::CommonOPS, bool_)    #(ExternalType, ExternalType) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(159)/    if ps_parameter and not cache_enable:/#[CNode]251
    %2 = Primitive::resolve{prim_type=1}(NameSpace::CommonOPS, bool_)    #(Undefined, Undefined) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(159)/    if ps_parameter and not cache_enable:/#ps_parameter
    %3 = %2(%para74)    #(Bool) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(159)/    if ps_parameter and not cache_enable:/#ps_parameter
    %4 = Primitive::Switch{prim_type=1}(%3, FuncGraph::fg_252, FuncGraph::fg_253)    #(Undefined, Undefined, Undefined)    # fg_252=↰_run_opt_with_one_number.252, fg_253=↱_run_opt_with_one_number.253 #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(159)/    if ps_parameter and not cache_enable:/#[CNode]254
    %5 = %4() #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(159)/    if ps_parameter and not cache_enable:/#[CNode]251
    %6 = %1(%5)    #(Undefined) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(159)/    if ps_parameter and not cache_enable:/#[CNode]251
    %7 = Primitive::Switch{prim_type=1}(%6, FuncGraph::fg_255, FuncGraph::fg_256)    #(Undefined, Undefined, Undefined)    # fg_255=✓_run_opt_with_one_number.255, fg_256=✗_run_opt_with_one_number.256 #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(159)/    if ps_parameter and not cache_enable:/#[CNode]257
    %8 = %7() #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(159)/    if ps_parameter and not cache_enable:/#[CNode]258
    Primitive::Return{prim_type=1}(%8)    #(Undefined) #scope: Default
      # In file D:\ProgramData\Anaconda3\envs\MindSpore\lib\site-packages\mindspore\nn\optim\adam.py(159)/    if ps_parameter and not cache_enable:/#[CNode]259
}
# order:
#   1: _run_opt_with_one_number.172:ps_parameter{[0]: ValueNode<Primitive> resolve, [1]: ValueNode<NameSpace> CommonOPS, [2]: ValueNode<Symbol> bool_}
#   2: _run_opt_with_one_number.172:ps_parameter{[0]: ps_parameter, [1]: ps_parameter}
#   3: _run_opt_with_one_number.172:[CNode]254{[0]: ValueNode<Primitive> Switch, [1]: ps_parameter, [2]: ValueNode<FuncGraph> ↰_run_opt_with_one_number.252, [3]: ValueNode<FuncGraph> ↱_run_opt_with_one_number.253}
#   4: _run_opt_with_one_number.172:[CNode]251{[0]: [CNode]254}
#   5: _run_opt_with_one_number.172:[CNode]251{[0]: ValueNode<Primitive> resolve, [1]: ValueNode<NameSpace> CommonOPS, [2]: ValueNode<Symbol> bool_}
#   6: _run_opt_with_one_number.172:[CNode]251{[0]: [CNode]251, [1]: [CNode]251}
#   7: _run_opt_with_one_number.172:[CNode]260{[0]: ValueNode<Primitive> resolve, [1]: ValueNode<NameSpace> SymbolStr, [2]: ValueNode<Symbol> P}
#   8: _run_opt_with_one_number.172:[CNode]261{[0]: ValueNode<Primitive> resolve, [1]: ValueNode<NameSpace> SymbolStr, [2]: ValueNode<Symbol> F}
#   9: _run_opt_with_one_number.172:[CNode]257{[0]: ValueNode<Primitive> Switch, [1]: [CNode]251, [2]: ValueNode<FuncGraph> ✓_run_opt_with_one_number.255, [3]: ValueNode<FuncGraph> ✗_run_opt_with_one_number.256}
#  10: _run_opt_with_one_number.172:[CNode]258{[0]: [CNode]257}
#  11: _run_opt_with_one_number.172:[CNode]259{[0]: ValueNode<Primitive> Return, [1]: [CNode]258}


#===============================================================================
# num of function graphs in stack: 7/8 (Ignored 1 internal frames).
